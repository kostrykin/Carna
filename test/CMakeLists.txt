cmake_minimum_required( VERSION 3.5 )
	
set( TESTS_QOBJECT_HEADERS
		""
	)

set( TESTS_HEADERS
		Tools/HUGZSceneFactory.hpp
		Tools/HUIO.hpp
		Tools/QGLContextHolder.hpp
		Tools/TestApplication.hpp
		Tools/TestFramebuffer.hpp
		Tools/TestScene.hpp
	)
	
set( TESTS_SOURCES
		Tools/HUGZSceneFactory.cpp
		Tools/QGLContextHolder.cpp
		Tools/TestApplication.cpp
		Tools/TestFramebuffer.cpp
		Tools/TestScene.cpp
	)
	
set( TESTS
		""
	)
	
set( TESTS_MISC_FILES
		UnitTests/configure.cmake
		ModuleTests/configure.cmake
		IntegrationTests/configure.cmake
	)
	
set( TESTS_RESOURCES
		""
	)

include( UnitTests/configure.cmake )
include( ModuleTests/configure.cmake )
include( IntegrationTests/configure.cmake )

############################################
# Find dependencies and add them to the linker
############################################

find_package( Qt5Core QUIET )
find_package( Qt5Widgets QUIET )
find_package( Qt5Gui QUIET )
find_package( Qt5OpenGL QUIET )
find_package( Qt5Test QUIET )
if(Qt5Core_FOUND AND Qt5Widgets_FOUND AND Qt5Gui_FOUND AND Qt5OpenGL_FOUND AND Qt5Test_FOUND)
    set(Qt5_FOUND TRUE)
    set(QT_FOUND TRUE)
    set(QT_LIBRARIES Qt5::Core Qt5::Widgets Qt5::Gui Qt5::OpenGL Qt5::Test)
    include_directories(
            ${Qt5Core_INCLUDE_DIRS}
            ${Qt5Widgets_INCLUDE_DIRS}
            ${Qt5Gui_INCLUDE_DIRS}
            ${Qt5OpenGL_INCLUDE_DIRS}
            ${Qt5Test_INCLUDE_DIRS}
        )
else()
    find_package( Qt4 4.8.0 COMPONENTS QtCore QtGui QtOpenGL QtTest REQUIRED )
    include( ${QT_USE_FILE} )
    add_definitions( ${QT_DEFINITIONS} )
	set(QT_FOUND ON)
endif()

# Boost
set(Boost_USE_MULTITHREADED ON)
set(Boost_USE_STATIC_RUNTIME OFF)
find_package(Boost 1.48.0 COMPONENTS iostreams)
if(Boost_FOUND)
    include_directories(${Boost_INCLUDE_DIRS})
endif()

# Carna
include_directories( ${CMAKE_SOURCE_DIR}/include )
link_directories( ${CMAKE_BINARY_DIR}/bin )

# Eigen
find_package( Eigen3 REQUIRED )
include_directories( ${EIGEN3_INCLUDE_DIR} )

############################################
# Project
############################################

if(Boost_FOUND AND QT_FOUND)

	############################################
	# Compose test suite
	############################################

    if(Qt5_FOUND)
	    QT5_WRAP_CPP( TESTS_QOBJECT_HEADERS_MOC ${TESTS_QOBJECT_HEADERS} )
	    QT5_ADD_RESOURCES( TESTS_RESOURCES_RCC ${TESTS_RESOURCES} )
    else(Qt5_FOUND)
	    QT4_WRAP_CPP( TESTS_QOBJECT_HEADERS_MOC ${TESTS_QOBJECT_HEADERS} )
	    QT4_ADD_RESOURCES( TESTS_RESOURCES_RCC ${TESTS_RESOURCES} )
    endif(Qt5_FOUND)

	set( TEST_SUITE_SRC_FILE	${CMAKE_CURRENT_BINARY_DIR}/${TARGET_NAME}-testsuite.cpp )

	file( REMOVE	${TEST_SUITE_SRC_FILE} )
	file( WRITE		${TEST_SUITE_SRC_FILE}	"// This file is automatically generated by CMake.\n\n" )
	file( APPEND	${TEST_SUITE_SRC_FILE}	"#include <QtTest/QtTest>\n" )
	file( APPEND	${TEST_SUITE_SRC_FILE}	"#include <LibCarna/base/glew.hpp>\n" )
	file( APPEND	${TEST_SUITE_SRC_FILE}	"#include \"TestSuite.hpp\"\n" )
	file( APPEND	${TEST_SUITE_SRC_FILE}	"#include \"TestApplication.hpp\"\n" )
	file( APPEND	${TEST_SUITE_SRC_FILE}	"const std::string SOURCE_PATH = \"${CMAKE_CURRENT_SOURCE_DIR}\";\n" )
	file( APPEND	${TEST_SUITE_SRC_FILE}	"const std::string BINARY_PATH = \"${CMAKE_CURRENT_BINARY_DIR}\";\n" )

	foreach( SOURCE_FILE ${TESTS_SOURCES} )
		file( APPEND	${TEST_SUITE_SRC_FILE}	"#include \"${CMAKE_CURRENT_SOURCE_DIR}/${SOURCE_FILE}\"\n" )
	endforeach( SOURCE_FILE )

	foreach( QT_GENERATED_SOURCE_FILE ${TESTS_QOBJECT_HEADERS_MOC} ${TESTS_RESOURCES_RCC} )
		file( APPEND	${TEST_SUITE_SRC_FILE}	"#include \"${QT_GENERATED_SOURCE_FILE}\"\n" )
	endforeach( QT_GENERATED_SOURCE_FILE )

	file( APPEND	${TEST_SUITE_SRC_FILE}	"\n" )
	file( APPEND	${TEST_SUITE_SRC_FILE}	"#include <LibCarna/base/LibCarnaException.hpp>\n" )
	file( APPEND	${TEST_SUITE_SRC_FILE}	"int main( int argc, char** argv )\n" )
	file( APPEND	${TEST_SUITE_SRC_FILE}	"{\n" )
	file( APPEND	${TEST_SUITE_SRC_FILE}	"    LibCarna::testing::TestApplication app( argc, argv );\n" )
	file( APPEND	${TEST_SUITE_SRC_FILE}	"    LibCarna::base::BreakForDebug::disable();\n" )
	file( APPEND	${TEST_SUITE_SRC_FILE}	"    bool success = true;\n" )
	foreach( TEST_CASE ${TESTS} )
		file( APPEND	${TEST_SUITE_SRC_FILE}	"\n" )
		file( APPEND	${TEST_SUITE_SRC_FILE}	"    ${TEST_CASE} instance_of_${TEST_CASE};\n" )
		file( APPEND	${TEST_SUITE_SRC_FILE}	"    success &= ( QTest::qExec( &instance_of_${TEST_CASE}, argc, argv ) == 0 );\n" )
		file( APPEND	${TEST_SUITE_SRC_FILE}	"\n" )
	endforeach( TEST_CASE )
	file( APPEND	${TEST_SUITE_SRC_FILE}	"    return success ? 0 : -1;\n" )
	file( APPEND	${TEST_SUITE_SRC_FILE}	"}\n" )
	
	############################################
	# Setup Visual Studio filters
	############################################

	SOURCE_GROUP( "Unit Tests"
		REGULAR_EXPRESSION \(.*test/UnitTests/.*\\.\)\(\(h\)|\(cpp\)|\(cmake\)\) )

	SOURCE_GROUP( "Module Tests"
		REGULAR_EXPRESSION \(.*test/ModuleTests/.*\\.\)\(\(h\)|\(cpp\)|\(cmake\)\) )

	SOURCE_GROUP( "Integration Tests"
		REGULAR_EXPRESSION \(.*test/IntegrationTests/.*\\.\)\(\(h\)|\(cpp\)|\(cmake\)\) )

	SOURCE_GROUP( "Miscellaneous"
		REGULAR_EXPRESSION .*\\.\(\(in\)|\(txt\)|\(qrc\)\) )

	SOURCE_GROUP( "Miscellaneous\\Generated Files"
		FILES "${TEST_SUITE_SRC_FILE}" ${TESTS_QOBJECT_HEADERS_MOC} ${TESTS_RESOURCES_RCC} )

	SOURCE_GROUP( "Miscellaneous\\Tools"
		REGULAR_EXPRESSION \(.*test/Tools/.*\\.\)\(\(h\)|\(cpp\)\) )

	############################################
	# Setup target
	############################################

	remove_definitions( -DLIBCARNA_EXPORT )
	add_definitions( -DBOOST_IOSTREAMS_NO_LIB )

	include_directories( ${CMAKE_PROJECT_DIR}Tools )

	set_source_files_properties( ${TESTS_QOBJECT_HEADERS_MOC} ${TESTS_SOURCES} ${TESTS_MISC_FILES} ${TESTS_RESOURCES_RCC}
		PROPERTIES
		HEADER_FILE_ONLY TRUE )

	include( "../misc/compiler_specific.cmake" )

	add_executable( ${TARGET_NAME}-testsuite
			Tools/TestSuite.hpp
			${TEST_SUITE_SRC_FILE}
			${TESTS_HEADERS}
			${TESTS_QOBJECT_HEADERS}
			${TESTS_QOBJECT_HEADERS_MOC}
			${TESTS_SOURCES}
			${TESTS_MISC_FILES}
			${TESTS_RESOURCES_RCC}
		)
			
	target_link_libraries( ${TARGET_NAME}-testsuite
			${OPENGL_LIBRARIES}
			${QT_LIBRARIES}
			${Boost_LIBRARIES}
			optimized	${TARGET_NAME}
			debug		${TARGET_NAME}${CMAKE_DEBUG_POSTFIX}
		)

	############################################
	# Run the tests
	############################################

	# CMake 2.8.12 and lower allowed reading the LOCATION target property (and 
	# configuration-specific variants) to determine the eventual location of build 
	# targets. This relies on the assumption that all necessary information is 
	# available at configure-time to determine the final location and filename of the 
	# target. However, this property is not fully determined until later at 
	# generate-time. [...] The OLD behavior for this policy is to allow reading the 
	# LOCATION properties from build-targets. The NEW behavior for this policy is to 
	# not to allow reading the LOCATION properties from build-targets.
	#
	# --> http://www.cmake.org/cmake/help/v3.0/policy/CMP0026.html
	if( POLICY CMP0026 )
		cmake_policy(SET CMP0026 OLD)
	endif()

	get_property( TEST_SUITE_EXECUTABLE TARGET ${TARGET_NAME}-testsuite PROPERTY LOCATION )
	add_custom_target( RUN_TESTSUITE
			ALL
			${TEST_SUITE_EXECUTABLE}
			DEPENDS ${TARGET_NAME} ${TARGET_NAME}-testsuite
			COMMENT "Running test suite..."
		)
	
else()

	if(~Boost_FOUND)
		message(WARNING "\nBoost not found, skipping testsuite.\n")
	elseif(~QT_FOUND)
		message(WARNING "\nQt4/5 not found, skipping testsuite.\n")
	endif()

endif()
